{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Qadence 2 Platforms","text":"<p>Note</p> <p>Qadence 2 Platforms is currently a work in progress and is under active development.</p> <p>Please be aware that the software is in an early stage, and frequent updates, including breaking changes, are to be expected. This means that:</p> <ul> <li>Features and functionalities may change without prior notice.</li> <li>The codebase is still evolving, and parts of the software may not function as intended.</li> <li>Documentation and user guides may be incomplete or subject to significant changes.</li> </ul> <p>Qadence 2 Platforms is a collection of functionalities that transforms Qadence IR into backend-specific data and constructors, to be executed by backend methods. It is not intended to be used directly by Qadence 2 users, but rather only those who need to implement new or extend existing backends, quantum instruction primitives, and compiler or backend directives, etc.</p>"},{"location":"#installation","title":"Installation","text":"<p>Note: it is advised to set up a python environment before installing the package.</p> <p>To install the current version, there is currently one option:</p>"},{"location":"#installation-from-source","title":"Installation from Source","text":"<p>Clone this repository by typing on the terminal</p> <pre><code>git clone https://github.com/pasqal-io/qadence2-platforms.git\n</code></pre> <p>Go to <code>qadence2-platforms</code> folder and install it using hatch:</p> <pre><code>python -m pip install hatch\n</code></pre> <p>and run <code>hatch</code> to create or reuse the project environment:</p> <pre><code>hatch -v shell\n</code></pre>"},{"location":"#description","title":"Description","text":""},{"location":"#platforms","title":"Platforms","text":"<p>This package should not be used directly by the user. It is used to convert Qadence IR into backend-compatible data, and to execute it with extra options (provided by the compilation process, either on Qadence 2 expressions or Qadence 2 core).</p>"},{"location":"#qadence-intermediate-representation-ir","title":"Qadence Intermediate Representation (IR)","text":"<p>Qadence 2 expressions is being compiled into an IR comprised of both quantum and classical operations.</p>"},{"location":"#platforms-api","title":"Platforms API","text":"<p>The <code>backend</code> module exposes a single <code>compile_to_backend</code> function which accepts a <code>Model</code> and a string denoting the <code>backend</code>.</p>"},{"location":"#platforms-backend","title":"Platforms Backend","text":"<p>Each submodule under <code>backend</code> is expected (1) to translate the <code>IR</code> data into backend-compatible data, (2) to provide instruction conversions from <code>IR</code> to backend, (3) to handle the storage and embedding of parameters, and (4) to implement execution process for <code>run</code>, <code>sample</code> and <code>expectation</code>.</p>"},{"location":"#example","title":"Example","text":"<p>Check the Example tab for usage example of this package.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>Before making a contribution, please review our code of conduct.</p> <ul> <li>Submitting Issues: To submit bug reports or feature requests, please use our issue tracker.</li> <li>Developing in qadence 2 platforms: To learn more about how to develop within <code>qadence 2 platforms</code>, please refer to contributing guidelines.</li> </ul>"},{"location":"getting_started_example/","title":"Example","text":""},{"location":"getting_started_example/#computing-grad-for-an-expression","title":"Computing <code>grad</code> for an expression","text":"<pre><code>import torch\nimport pyqtorch as pyq\nfrom qadence2_ir.types import (\n    Model,\n    Alloc,\n    AllocQubits,\n    Call,\n    Load,\n    Support,\n    QuInstruct,\n    Assign\n)\nfrom qadence2_platforms.compiler import compile_to_backend\n\n\n# define the model\nmodel = Model(\n    register=AllocQubits(num_qubits=2, options={\"initial_state\": \"10\"}),\n    inputs={\n        \"x\": Alloc(size=1, trainable=False),\n    },\n    instructions=[\n        Assign(\"%0\", Call(\"mul\", 1.57, Load(\"x\"))),\n        Assign(\"%1\", Call(\"sin\", Load(\"%0\"))),\n        QuInstruct(\"rx\", Support(target=(0,)), Load(\"%1\")),\n        QuInstruct(\"not\", Support(target=(1,), control=(0,))),\n    ],\n    directives={\"digital\": True},\n)\n\n# place the model and choose the backend in `compile_to_backend` function\ncompiled_model = compile_to_backend(model, \"pyqtorch\")\n\n# define the feature parameters values that are used in the `Model`\nfeature_params = {\"x\": torch.rand(1, requires_grad=True)}\n\n# run the `Model` execution to retrieve a wavefunction as `torch.Tensor`\nwavefunction = compiled_model.run(state=pyq.zero_state(2), values=feature_params)\n\n# calculate the `grad` from the wavefunction, given the feature parameters\ndfdx = torch.autograd.grad(wavefunction, feature_params[\"x\"], torch.ones_like(wavefunction))\n\nprint(dfdx)\n</code></pre> <pre><code>(tensor([-0.1637]),)\n</code></pre> <p>Above is a working example on how to use <code>Qadence 2 platforms</code> package. We first need a <code>Model</code> data to work with (from <code>Qadence 2 IR</code>), which is a qadence 2 expression compiled into an IR. Once the model is defined, a backend must be chosen. A <code>compile_to_backend</code> should be invoked to translate the model data into backend-specific data, and also to expose backend's methods and functionalities to execute the model data code. The execution can be done in emulators or QPU, with sampling or expectation values, for instance.</p> <p>In the case below, <code>torch</code> data is used, which is differentiable, so <code>autograd</code> can be done in the user input tensor. <code>PyQTorch</code> is defined as backend and thus the <code>Model</code> will be converted into <code>torch</code> tensor data, for a wavefunction calculation through the backend <code>Interface</code> method called <code>run</code>.</p> <p>Note</p> <p>The code above is not intended to be used as is, but rather just to show how data flows from expression, to compilation, to IR and to platforms. Those features are wrapped in the user-accessible package <code>Qadence 2</code>.</p>"},{"location":"getting_started/CODE_OF_CONDUCT/","title":"Code of Conduct","text":""},{"location":"getting_started/CODE_OF_CONDUCT/#our-pledge","title":"Our Pledge","text":"<p>In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.</p>"},{"location":"getting_started/CODE_OF_CONDUCT/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to creating a positive environment include:</p> <ul> <li>Using welcoming and inclusive language</li> <li>Being respectful of differing viewpoints and experiences</li> <li>Gracefully accepting constructive criticism</li> <li>Focusing on what is best for the community</li> <li>Showing empathy towards other community members</li> </ul> <p>Examples of unacceptable behavior by participants include:</p> <ul> <li>The use of sexualized language or imagery and unwelcome sexual attention or advances</li> <li>Trolling, insulting/derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or electronic address, without explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a professional setting</li> </ul>"},{"location":"getting_started/CODE_OF_CONDUCT/#our-responsibilities","title":"Our Responsibilities","text":"<p>Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.</p> <p>Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.</p>"},{"location":"getting_started/CODE_OF_CONDUCT/#scope","title":"Scope","text":"<p>This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.</p>"},{"location":"getting_started/CONTRIBUTING/","title":"How to contribute","text":"<p>We're grateful for your interest in participating in Qadence 2 Platforms. Please follow our guidelines to ensure a smooth contribution process.</p>"},{"location":"getting_started/CONTRIBUTING/#reporting-an-issue-or-proposing-a-feature","title":"Reporting an issue or proposing a feature","text":"<p>Your course of action will depend on your objective, but generally, you should start by creating an issue. If you've discovered a bug or have a feature you'd like to see added to qadence 2 platforms, feel free to create an issue on qadence 2 platforms' GitHub issue tracker. Here are some steps to take:</p> <ol> <li>Quickly search the existing issues using relevant keywords to ensure your issue hasn't been addressed already.</li> <li> <p>If your issue is not listed, create a new one. Try to be as detailed and clear as possible in your description.</p> </li> <li> <p>If you're merely suggesting an improvement or reporting a bug, that's already excellent! We thank you for it. Your issue will be listed and, hopefully, addressed at some point.</p> </li> <li>However, if you're willing to be the one solving the issue, that would be even better! In such instances, you would proceed by preparing a Pull Request.</li> </ol>"},{"location":"getting_started/CONTRIBUTING/#submitting-a-pull-request","title":"Submitting a pull request","text":"<p>We're excited that you're eager to contribute to Qadence 2 Platforms. To contribute, fork the <code>main</code> branch of qadence 2 platforms repository and once you are satisfied with your feature and all the tests pass create a Pull Request.</p> <p>Here's the process for making a contribution:</p> <p>Click the \"Fork\" button at the upper right corner of the repo page to create a new GitHub repo at <code>https://github.com/USERNAME/qadence2-platforms</code>, where <code>USERNAME</code> is your GitHub ID. Then, <code>cd</code> into the directory where you want to place your new fork and clone it:</p> <pre><code>git clone https://github.com/USERNAME/qadence2-platforms.git\n</code></pre> <p>Next, navigate to your new qadence 2 platforms fork directory and mark the main qadence 2 platforms repository as the <code>upstream</code>:</p> <pre><code>git remote add upstream https://github.com/pasqal-io/qadence2-platforms.git\n</code></pre>"},{"location":"getting_started/CONTRIBUTING/#setting-up-your-development-environment","title":"Setting up your development environment","text":"<p>We recommended to use <code>hatch</code> for managing environments:</p> <p>To develop within qadence 2 platforms, use: <pre><code>pip install hatch\nhatch -v shell\n</code></pre></p> <p>To run qadence 2 platforms tests, use:</p> <pre><code>hatch -e tests run test\n</code></pre> <p>If you don't want to use <code>hatch</code>, you can use the environment manager of your choice (e.g. Conda) and execute the following:</p> <pre><code>pip install pytest\npip install -e .\npytest\n</code></pre>"},{"location":"getting_started/CONTRIBUTING/#useful-things-for-your-workflow-linting-and-testing","title":"Useful things for your workflow: linting and testing","text":"<p>Use <code>pre-commit</code> to lint your code and run the unit tests before pushing a new commit.</p> <p>Using <code>hatch</code>, it's simply:</p> <pre><code>hatch -e tests run pre-commit run --all-files\nhatch -e tests run test\n</code></pre> <p>Our CI/CD pipeline will also test if the documentation can be built correctly. To test it locally, please run:</p> <pre><code>hatch -e docs run mkdocs build --clean --strict\n</code></pre> <p>Without <code>hatch</code>, <code>pip</code> install those libraries first: \"mkdocs\", \"mkdocs-material\", \"mkdocstrings\", \"mkdocstrings-python\", \"mkdocs-section-index\", \"mkdocs-jupyter\", \"mkdocs-exclude\", \"markdown-exec\"</p> <p>And then:</p> <pre><code> mkdocs build --clean --strict\n</code></pre>"}]}